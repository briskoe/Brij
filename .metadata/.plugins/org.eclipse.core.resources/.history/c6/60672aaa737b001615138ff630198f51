package main.controller;

import java.util.ArrayList;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import main.bean.user.MyUserDetailsService;
import main.bean.user.User;
import main.bean.user.UserRole;
import main.dao.UserDao;

@RestController
public class UserController {

	
	@RequestMapping("/user/register")
	@ResponseBody
	public String register(@RequestBody User userEntity) {
		String encryptedPassword = new BCryptPasswordEncoder().encode(userEntity.getPassword());
		userEntity.setPassword(encryptedPassword);
		UserRole userRole = new UserRole(userEntity, "ROLE_USER");
		userEntity.getUserRole().add(userRole);
		User savedUser = userDao.save(user);
		UserDetails userDetails = new MyUserDetailsService(userDao).loadUserByUsername(userEntity.getUsername());
		UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(userDetails,
				encryptedPassword, userDetails.getAuthorities());
		SecurityContextHolder.getContext().setAuthentication(auth);
		
		return "it was registered!";

	}

	/**
	 * GET /delete --> Delete the user having the passed id.
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public String delete(String username) {
		try {
			User user = new User(username);
			userDao.delete(user);
		} catch (Exception ex) {
			return "Error deleting the user:" + ex.toString();
		}
		return "User succesfully deleted!";
	}

	/**
	 * GET /get-by-email --> Return the id for the user having the passed email.
	 */
	@RequestMapping("/get-by-email")
	@ResponseBody
	public String getByEmail(String email) {
		String userId = "";
		try {
			User user = userDao.findsomething(email);
			userId = String.valueOf(user.getUsername());
		} catch (Exception ex) {
			return "User not found" + ex.toString();
		}
		return "The user id is: " + userId;
	}

	/**
	 * GET /get-by-email --> Return the id for the user having the passed email.
	 */
	@RequestMapping("/admin/user/findAll")
	@ResponseBody
	public ArrayList<User> getAllUser() {
		ArrayList<User> users;
		try {
			users = userDao.findAll();
		} catch (Exception ex) {
			return null;
		}
		return users;
	}

	@RequestMapping(value = "/user/save", method = RequestMethod.POST)
	@ResponseBody
	public String updateUser(@RequestBody User user) {
		try {
			userDao.save(user);
		} catch (Exception ex) {
			return "Error updating the user: " + ex.toString();
		}
		return "User succesfully updated!";
	}
	
	
	@Autowired
	private UserDao userDao;
	final static Logger logger = Logger.getLogger(UserController.class);

}
